{"version":3,"sources":["infoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["infoBox","title","cases","total","active","isRed","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortedData","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpactiy","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","girdLines","ticks","callback","index","values","buildChartData","lastDataPoint","ChartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","chartData","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qVAwBeA,MAnBf,YAAoE,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,MAAYC,EAAQ,0DAC/D,OACI,kBAACC,EAAA,EAAD,CAAOC,UAAS,kBAAaJ,GAAU,oBAAvB,YACZC,GAAS,gBACPI,QAASH,EAAMG,SAEjB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBJ,UAAU,kBACvCP,GAEL,wBAAIO,UAAU,kBAAkBN,GAChC,kBAACS,EAAA,EAAD,CAAYC,MAAM,gBAAgBJ,UAAU,kBACvCL,EADL,a,6ECZVU,EAAkB,CACtBX,MAAO,CACLY,IAAK,UACLC,WAAY,KAEdC,UAAW,CACTF,IAAK,UACLC,WAAY,MAEdE,OAAQ,CACNH,IAAK,UACLC,WAAY,MAIHG,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MAEjCC,EAAW,SAACC,GACvB,IAAMC,EAAU,YAAOD,GAUvB,OARAC,EAAWC,MAAK,SAACC,EAAGC,GAClB,OAAID,EAAExB,MAAQyB,EAAEzB,OACN,EAED,KAIJsB,GCbMI,MAff,YAAoD,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KAExC,OACE,yBAAKxB,UAAU,OACf,kBAAC,IAAD,CAAYuB,OAAQA,EAAQC,KAAMA,GAChC,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EDwBO,SAACZ,GAAD,IAAOO,EAAP,uDAAmB,QAAnB,OAC3BP,EAAKa,KAAI,SAACC,GAAD,OACP,kBAACC,EAAA,EAAD,CACEP,OAAQ,CAACM,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACtDC,YAAa,GACb9B,MAAOC,EAAgBiB,GAAWhB,IAClC6B,UAAW9B,EAAgBiB,GAAWhB,IACtC8B,OACEC,KAAKC,KAAKT,EAAQP,IAAcjB,EAAgBiB,GAAWf,YAG7D,kBAACgC,EAAA,EAAD,KACE,yBAAKvC,UAAU,kBACb,yBAAKA,UAAU,YAAYwC,MAAO,CAACC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QACxD,yBAAK1C,UAAU,aAAa6B,EAAQA,SAC9B,yBAAK7B,UAAU,kBAAf,cACcY,IAAQiB,EAAQnC,OAAOmB,OAAO,QAE5C,yBAAKb,UAAU,kBAAf,cACYY,IAAQiB,EAAQrB,WAAWK,OAAO,QAE9C,yBAAKb,UAAU,eAAf,WACSY,IAAQiB,EAAQpB,QAAQI,OAAO,cC5CzC8B,CAActB,EAAWC,M,OCEnBsB,MAbf,YAA6B,IAAbvB,EAAY,EAAZA,UACZ,OACI,yBAAKrB,UAAU,SACVqB,EAAUO,KAAI,gBAAEC,EAAF,EAAEA,QAASnC,EAAX,EAAWA,MAAX,OACX,4BACI,4BAAKmC,GACL,4BAAI,gCAASnC,GAAb,Y,QCLdmD,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLb,OAAQ,IAGZc,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAazC,GAC5B,OAAOH,IAAQ4C,EAAYC,OAAO5C,OAAO,WAI/C6C,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJhD,OAAQ,WACRiD,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CACLC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAOxD,IAAQ6C,GAAO5C,OAAO,YAUjCwD,EAAiB,SAACtD,EAAMO,GAC5B,IACIgD,EADEC,EAAY,GAElB,IAAK,IAAIC,KAAQzD,EAAKrB,MAAO,CAC3B,GAAI4E,EAAe,CACjB,IAAMG,EAAe,CACnBC,EAAGF,EACHG,EAAG5D,EAAKO,GAAWkD,GAAQF,GAE7BC,EAAUK,KAAKH,GAEjBH,EAAgBvD,EAAKO,GAAWkD,GAElC,OAAOD,GAwCIM,MArCf,YAAmC,IAAdvD,EAAa,EAAbA,UAAa,EACRwD,mBAAS,IADD,mBACzB/D,EADyB,KACnBgE,EADmB,KAiBhC,OAdAC,qBAAU,YACO,uCAAG,sBAAA9D,EAAA,sEACV+D,MAAM,8DACTC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACnE,GACL,IAAIsE,EAAYhB,EAAetD,EAAMO,GACrCyD,EAAQM,MAPI,2CAAH,qDAUfC,KACC,CAAChE,IAGF,8BACO,OAAJP,QAAI,IAAJA,OAAA,EAAAA,EAAMwE,QAAS,GACd,kBAAC,OAAD,CACE1C,QAASA,EACT9B,KAAM,CACJyE,SAAU,CACR,CACEC,gBAAiB,yBACjBC,YAAa,UACb3E,KAAMA,S,OCkCP4E,MA/Gf,WAAgB,IAAD,EACqBb,mBAAS,IAD9B,mBACNzD,EADM,KACKuE,EADL,OAEiBd,mBAAS,aAF1B,mBAENjD,EAFM,KAEGgE,EAFH,OAGyBf,mBAAS,IAHlC,mBAGN/C,EAHM,KAGO+D,EAHP,OAIqBhB,mBAAS,IAJ9B,mBAINiB,EAJM,KAIKC,EAJL,OAKqBlB,mBAAS,CAAE9C,IAAK,SAAUiE,KAAM,UALrD,mBAKNC,EALM,KAKKC,EALL,OAMiBrB,mBAAS,GAN1B,mBAMNsB,EANM,KAMGC,EANH,OAO2BvB,mBAAS,IAPpC,mBAONwB,EAPM,KAOQC,EAPR,OAQqBzB,mBAAS,SAR9B,mBAQNxD,EARM,KAQKkF,EARL,KAUbxB,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACnE,GACL+E,EAAe/E,QAElB,IAEHiE,qBAAU,YACc,uCAAG,sBAAA9D,EAAA,sEACjB+D,MAAM,4CACTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACnE,GACL,IAAMM,EAAYN,EAAKa,KAAI,SAACC,GAAD,MAAc,CACvC4E,KAAM5E,EAAQA,QACd4B,MAAO5B,EAAQE,YAAY2E,SAEvB1F,EAAaF,EAASC,GAC5BiF,EAAahF,GACb4E,EAAavE,GACbkF,EAAgBxF,MAXG,2CAAH,qDActB4F,KACC,IACH,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAA3F,EAAA,6DAChB4F,EAAcD,EAAME,OAAOtD,MACjCoC,EAAWiB,GACLpF,EACY,cAAhBoF,EACI,qCADJ,mDAEgDA,GAN5B,SAOhB7B,MAAMvD,GACTwD,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACnE,GACL+E,EAAe/E,GACf8E,EAAWiB,GACXX,EAAa,CAACpF,EAAKgB,YAAYC,IAAKjB,EAAKgB,YAAYE,OACrDoE,EAAW,MAbO,2CAAH,sDAgBrB,OACE,yBAAKrG,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,wCACA,kBAACgH,EAAA,EAAD,CAAahH,UAAU,iBACrB,kBAACiH,EAAA,EAAD,CACEC,QAAQ,WACRzD,MAAO5B,EACPsF,SAAUP,GAEV,kBAACQ,EAAA,EAAD,CAAU3D,MAAM,aAAhB,aACCpC,EAAUO,KAAI,SAACC,GAAD,OACb,kBAACuF,EAAA,EAAD,CAAU3D,MAAO5B,EAAQ4B,OAAzB,IAAkC5B,EAAQ4E,YAKlD,yBAAKzG,UAAU,cACb,kBAAC,EAAD,CACEH,OAAK,EACLD,OAAsB,UAAd0B,EACRrB,QAAS,SAAAoH,GAAC,OAAIb,EAAa,UAC3B/G,MAAM,oBACNC,MAAOgB,EAAgBqB,EAAYuF,YACnC3H,MAAOoC,EAAYrC,QAErB,kBAAC,EAAD,CACAE,OAAsB,cAAd0B,EACRrB,QAAS,SAAAoH,GAAC,OAAIb,EAAa,cACzB/G,MAAM,YACNC,MAAOgB,EAAgBqB,EAAYwF,gBACnC5H,MAAOoC,EAAYvB,YAErB,kBAAC,EAAD,CACAX,OAAK,EACLD,OAAsB,WAAd0B,EACRrB,QAAS,SAAAoH,GAAC,OAAIb,EAAa,WACzB/G,MAAM,SACNC,MAAOgB,EAAgBqB,EAAYyF,aACnC7H,MAAOoC,EAAYtB,UAGvB,kBAAC,EAAD,CAAKa,UAAWA,EAAWD,UAAWiF,EAAc/E,OAAQ2E,EAAW1E,KAAM4E,KAG/E,kBAACrG,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACE,EAAA,EAAD,KACE,qDACA,kBAAC,EAAD,CAAOmB,UAAW0E,IAClB,6BACA,6BACA,8CAAoBzE,GACpB,kBAAC,EAAD,CAAWA,UAAWA,QC5GZmG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7c2bc62.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport \"./infoBox.css\"\r\n\r\n\r\nfunction infoBox({title, cases, total, active, isRed,   ...props}) {\r\n    return (\r\n        <Card  className={`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"\r\n          }`} onClick={props.onClick}>\r\n            \r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" className=\"infoBox__title\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className=\"infoBox__cases\">{cases}</h2>\r\n                <Typography color=\"textSecondary\" className=\"infoBox__total\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default infoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n\r\n  return sortedData;\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") => \r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpactiy={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}}></div>\r\n    <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Confirmed: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n          Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n          Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n    \r\n  ));\r\n\r\nexport default sortData;\r\n","import React from 'react';\r\nimport \"./Map.css\"\r\nimport { Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    \r\n    return (\r\n      <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport \"./Table.css\"\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{cases}</strong>  </td>\r\n                </tr>  \r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        girdLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n\r\n\r\n  const buildChartData = (data, casesType) => {\r\n    const ChartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        ChartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return ChartData;\r\n  };\r\n  \r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport InfoBox from \"./infoBox\";\r\nimport \"./App.css\";\r\nimport Map from \"./Map\";\r\nimport Table from \"./Table\";\r\nimport {sortData, prettyPrintStat} from \"./util\";\r\nimport LineGraph from \"./LineGraph\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          const sortedData = sortData(data);\r\n          setTableData(sortedData);\r\n          setCountries(countries);\r\n          setMapCountries(data);\r\n        });\r\n    };\r\n    getCountriesData();\r\n  }, []);\r\n  const onCountryChange = async (event) => {\r\n    const countryCode = event.target.value;\r\n    setCountry(countryCode);\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n        setCountry(countryCode);\r\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setMapZoom(4);\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n        <div className=\"app__header\">\r\n          <h1>COVID 19</h1>\r\n          <FormControl className=\"app__dropdown\">\r\n            <Select\r\n              variant=\"outlined\"\r\n              value={country}\r\n              onChange={onCountryChange}\r\n            >\r\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\r\n              {countries.map((country) => (\r\n                <MenuItem value={country.value}> {country.name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"app__stats\">\r\n          <InfoBox\r\n            isRed\r\n            active={casesType === \"cases\"}\r\n            onClick={e => setCasesType('cases')}\r\n            title=\"Coronavirus cases\"\r\n            cases={prettyPrintStat(countryInfo.todayCases)}\r\n            total={countryInfo.cases}\r\n          />\r\n          <InfoBox\r\n          active={casesType === \"recovered\"}\r\n          onClick={e => setCasesType('recovered')}\r\n            title=\"Recovered\"\r\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n            total={countryInfo.recovered}\r\n          />\r\n          <InfoBox\r\n          isRed\r\n          active={casesType === \"deaths\"}\r\n          onClick={e => setCasesType('deaths')}\r\n            title=\"Deaths\"\r\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n            total={countryInfo.deaths}\r\n          />\r\n        </div>\r\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\r\n      </div>\r\n\r\n      <Card className=\"app__right\">\r\n        <CardContent>\r\n          <h3>Live cases by country</h3>\r\n          <Table countries={tableData} />\r\n          <br/>\r\n          <br/>\r\n          <h3> Worldwide new {casesType}</h3>\r\n          <LineGraph casesType={casesType} />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}